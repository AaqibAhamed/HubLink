@using PagedList.Mvc

@model Wlog.Web.Models.LogListModel



@{
    Layout = "~/Views/Shared/_LayoutInternal.cshtml";



}

<style>
    input.full-text-search {
        width: 100%;
        height: 30px;
        line-height: 30px;
        padding: 10px;
    }



    li.textcomplete-item.active > a, li.textcomplete-item.active > a:hover, li.textcomplete-item.active > a:focus {
        background-color: #feb !important;
    }

    li.textcomplete-item .dropdown-menu {
        border-bottom: 1px dashed #888;
        color: #666 !important;
    }


    li.textcomplete-item h5 {
        color: #666 !important;
        font-weight: bold;
        margin-bottom: 0px;
        margin-top: 1px;
    }

    li.textcomplete-item sub {
        color: #666 !important;
        line-height: 15px;
    }

    li.textcomplete-item .stop-words {
        color: orange !important;
    }


    li.textcomplete-item .field-names {
        color: #666 !important;
    }


    .search-group input, .search-group select, .search-group button {
        height: 40px;
    }
</style>

<script>
    var dictTable;
    function setMessageError() {
        $('#SearchMessage').parent("div").addClass("has-error");
    }

    function resetMessageError() {
        $('#SearchMessage').parent("div").removeClass("has-error");
    }
    var editor;
    function modelToForm()
    {
        $("#editorApplicationId").val(   editor.applicationId);
        $("#editorKey").val(   editor.itemKey);
        $("#editorValue").val(   editor.itemValue);
        $("#editorDictionaryName").val( editor.dictionaryName  );
        //delete button
        $("#deleteRow").hide();
        if(!editor.isNew)   $("#deleteRow").show();
        //title
        $("#modalTitle").html("Add new Item");
        if (!editor.isNew) $("#modalTitle").html("Edit item" + editor.ItemKey);

        //title
        $("#editorKey").removeAttr("disabled");
        if (!editor.isNew)$("#editorKey").attr("disabled","true");

      

        
    }

    function formToModel()
    {
        editor.applicationId= $("#editorApplicationId").val(  );
        editor.dictionaryName= $("#editorDictionaryName").val(  );
        editor.itemKey=$("#editorKey").val( );
        editor.itemValue=$("#editorValue").val(   );
    }

    function deleteItem()
    {


        bootbox.confirm({
            message: "Do you wand to delete key "+editor.itemKey+" from dictionary?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                    var id = editor.id;
                    $.get("/private/DeleteDictionaryItemById?id=" + id).success(function (data) {
                        dictTable.ajax.reload();
                        $("#editorModal").modal('hide');
                    })
                    .error(function () {
                        bootbox.alert("Unable to delete record");
                    });
                }
            }
        });
    }
    function save()
    {
        $(".errormsg").remove();

       // alert(JSON.stringify(editor));

        $.ajax(
            {
                type: "POST",
                url:"/private/SaveDictionaryItem",
                data:editor
            })
            .done(function(data) 
            {
                dictTable.ajax.reload();
                $("#editorModal").modal('hide')
            })
          .fail(function(jqXHR, textStatus) {
              $("#editorModal form").prepend("<div class='errormsg alert alert-danger' ><b>Error:</b> "+textStatus+"</div>");
              
          })
          .always(function() {
              alert( "complete" );
          });
 

    }
    function edit(id)
    {
        if(id)
        {
            $.get("/private/GetDictionaryItemById?id="+id).success(function(data)
            {
                editor = {
                    applicationId: $("#ApplicationId").val(),
                    itemKey:data.ItemKey,
                    itemValue:data.ItemValue,                        
                    dictionaryName:"MAIN",
                    isNew: false,
                    id:data.Id
                };
                modelToForm();
                $("#editorModal").modal();
            })
            .error(function()
            {
                bootbox.alert("Unable to get record to edit");
            });
        }
        else
        {
            modelToForm();
            $("#editorModal").modal();
        }
      
    }
    /* Table configuration*/
    $(document).ready(function () {
        dictTable = $('#example').DataTable(
             {
                 dom: 'Brtilp',
                 bFilter: false,
                 serverSide: true,
                 processing: true,
                 select: true,
                 "ajax": {
                     "url": "/private/SearchDictionary",
                     "type": "GET",
                     error: function (xhr, ajaxOptions, thrownError) {
                         if (xhr.statusText == "Unable to parse Query") {
                             setMessageError();
                         }
                     },
                     "data": function (d) {


                         var settings =
                             {
                                 "applicationId": $("#ApplicationId>option:selected").val(),
                                 "sortOrder": "desc",
                                 "sortBy": "Key",
                                 "key": "",
                                 "page": 1,
                                 "pageSize": 10
                             };

                         if (dictTable) {
                             settings = {
                                 "applicationId": $("#ApplicationId>option:selected").val(),
                                 "sortOrder": d.order[0].dir,
                                 "sortBy": d.columns[d.order[0].column].name,
                                 "key": $("#SearchMessage").val(),
                                 "page": dictTable.page() + 1,
                                 "pageSize": dictTable.page.len()
                             }
                         }


                         return $.extend({}, {}, {
                             "applicationId": settings.applicationId,
                             "sortOrder": settings.sortOrder,
                             "sortBy": settings.sortBy,
                             "key": settings.key,
                             "page": settings.page,
                             "pageSize": settings.pageSize,
                             "draw": d.draw
                         });
                     }
                 },
                 "columns": [
                 {
                     "title": "Source Date", name: "SourceDate", data: "SourceDate", visible: true,
                     "width": "180px",
                     render: function (data, type, full, meta) {

                         var a;
                         if (typeof data === 'string') {
                             a = /\/Date\((\d*)\)\//.exec(data);
                             if (a) {
                                 data = new Date(+a[1]);
                             }
                         }
                         return moment(data).format("YYYY-MM-DD HH:mm:ss.SSS");


                     }
                 },
                 { "title": "Key", name: "Key", data: "ItemKey", visible: true, "width": "80px", },
                 { "title": "Value", name: "Value", data: "ItemValue", visible: true,
                     render: function (data, type, full, meta) 
                     { 
                         if (data!=null && data.lenght>150) return data.substring(0,150)+"...";
                         return data;
                     }
                 },
                 {  visible: true,
                 "width": "180px",
                    render: function (data, type, full, meta) 
                    { 
                        
                        return "<button class='btn btn-warning' onclick='edit(\""+full["Id"]+"\");' >Edit</button>";
                    }
                }

                 ],

                 buttons: [
           
           
            {
                text: 'Add',
                className: 'btn btn-success', action: function (e, dt, node, config) {
                    editor = {
                        applicationId: $("#ApplicationId").val(),
                        key:"",
                        value:"",                        
                        dictionaryName:"MAIN",
                        isNew:true
                    };

                    edit();

                }
            }
                 ]
             });

       
       



    });



     

    $(document).ready(function () {
        $(".searchButton").click(function () {
            search();
        });

    });

    function search() {
        dictTable.ajax.reload();
       
    }
</script>


<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header"><i class="fa fa-list-alt fa-fw" aria-hidden="true"></i> &nbsp; Dictionary</h1>
    </div>
    <!-- /.col-lg-12 -->
</div>


<div class="row">




    <div class="row">

        <div class="col-md-12">

            <div class="input-append search-group">





                <div class="input-group">
                    <div class="input-group-btn">
                        @Html.DropDownListFor(m => m.ApplicationId,
     new SelectList(Model.Apps, "Id", "ApplicationName", Model.ApplicationId),
     new { @class = " form-control ApplicationSelect", @style = "width:200px;background-color: #eee;" })
                    </div>

                    <input type="text" name="SearchMessage" id="SearchMessage" class="form-control" placeholder="Key vale" autocomplete="off">

                    <span class="input-group-btn">
                        <button class="btn btn-default searchButton" type="button" style="background-color: #eee;"><i class="glyphicon glyphicon-search" style="font-size: 20px;"></i></button>
                    </span>
                </div><!-- /input-group -->



            </div>
          

        </div>

    </div>

</div>
<div class="row"
     ></div>
<div class="row">




    <table id="example" class="table table-striped table-bordered" cellspacing="0" width="100%"></table>




</div>




<div id="editorModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="modalTitle">Modal title</h4>
            </div>
            <div class="modal-body">
               
                <form>
                    <input type="hidden"  id="editorApplicationId" value="MAIN" disabled>
                    <div class="form-group">
                        <label for="editorDictionaryName">Dictionary</label>
                        <input type="text" class="form-control" id="editorDictionaryName" value="MAIN" disabled>
                        <p class="help-block">Dictionary, atm only one dictionary for app is allowed</p>
                    </div>
                    <div class="form-group">
                        <label for="editorKey">Key</label>
                        <input type="text" class="form-control" id="editorKey" placeholder="Key">
                    </div>
                    <div class="form-group">
                        <label for="editorValue">Value</label>
                        <textarea type="password" class="form-control" id="editorValue" placeholder="Password"></textarea>
                    </div>
                    
                    
                </form>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" id="deleteRow"  onclick="deleteItem();">Delete</button>
                <button type="button" class="btn btn-default" data-dismiss="modal" >Close</button>
                <button type="button" class="btn btn-primary"  onclick="formToModel();save();">Save changes</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

