@using PagedList.Mvc

@model Wlog.Web.Models.LogListModel



@{
    Layout = "~/Views/Shared/_LayoutInternal.cshtml";

    Func<string, string> getSortOrder = (s) =>
    {
        if (string.IsNullOrEmpty(Model.SortOrder))
        {
            return "dsc";
        }

        if (string.Compare(s, Model.SortBy, true) == 0)
        {
            if (string.Compare("asc", Model.SortOrder, true) == 0)
            {
                return "dsc";
            }
        }
        return "asc";
    };

}



    <div class="row">
        <h1>Log Messages</h1>
        @using (Html.BeginForm("Logs", "Private", FormMethod.Get))
        {

          
            <p>
                Application: 
                  @Html.DropDownListFor(m=>m.ApplicationId, new SelectList(Model.Apps, 
                               "IdApplication", "ApplicationName", 
                               Model.ApplicationId))
                Find Message: @Html.TextBox("SerchMessage", Model.SerchMessage)
                <input type="submit" value="Search" class="btn btn-default" />
            </p>
        }
    </div>
    <div class="row">
        <table class="table table-striped table-hover ">
            <thead>
                <tr>
                    <th>
                        @Html.ActionLink("Date", "Logs", new {ApplicationId=Model.ApplicationId, sortBy = "Date", sortOrder = getSortOrder("Date"), Model.SerchMessage })
                    </th>
                    <th>
                        @Html.ActionLink("Level", "Logs", new {ApplicationId=Model.ApplicationId, sortBy = "Level", sortOrder = getSortOrder("Level"), Model.SerchMessage })
                    </th>
                    <th>
                        @Html.ActionLink("Message", "Logs", new { ApplicationId = Model.ApplicationId, sortBy = "Message", sortOrder = getSortOrder("Message"), Model.SerchMessage })
                    </th>
                </tr>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(x => item.SourceDate)
                        </td>
                        <td>
                            @{ 
                                var labeltype = "label-default";
                                if(item.Level!=null)
                                {
                                    switch (item.Level.ToLower())
                                    {
                                        case "fatal":
                                        case "error": labeltype = "label-important"; break;
                                        case "info": labeltype = "label-info"; break;
                                        case "warning": labeltype = "label-warning"; break;
                                    }
                                }
                                }
                            <span class="label @labeltype">
                                @item.Level
                            </span>
                        </td>
                        <td>
                            @Html.DisplayFor(x=>item.Message)
                        </td>
                    </tr>
                }
            </thead>
            <tbody></tbody>
        </table>
        <br />
        Page @(Model.Items.PageCount < Model.Items.PageNumber ? 0 : Model.Items.PageNumber) of @Model.Items.PageCount

       @Html.PagedListPager(Model.Items, page => Url.Action("Logs",
    new { Model.ApplicationId,page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

    </div>

