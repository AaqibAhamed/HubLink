//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using NLog;
using Wlog.BLL.Classes;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Reporitories;
using Wlog.Web.Code.Authentication;
using Wlog.Web.Code.Helpers;
using Wlog.Web.Models;
using Wlog.Web.Models.User;


namespace Wlog.Web.Controllers
{
    /// <summary>
    /// Controller to manage account features
    /// </summary>
    [Authorize]
    public class AccountController : Controller
    {

        private static Logger logger = LogManager.GetCurrentClassLogger();

        // GET: /Account/Login

        [AllowAnonymous]
        public ActionResult Login()
        {
            return View();
        }

        
        // POST: /Account/Login

        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginModel model, string returnUrl)
        {
            logger.Debug("[Account]: login");
            WLogMembershipProvider provider = new WLogMembershipProvider();
            if (provider.ValidateUser(model.UserName, model.Password))
            {
                FormsAuthentication.SetAuthCookie(model.UserName, true);
                if (string.IsNullOrWhiteSpace(returnUrl))
                {
                    returnUrl = "~/private";
                }
                return RedirectToLocal(returnUrl);
            }

            // Se si arriva a questo punto, significa che si è verificato un errore, rivisualizzare il form
            ModelState.AddModelError(String.Empty, "Il nome utente o la password fornita non è corretta.");
            return View(model);
        }


        // POST: /Account/LogOff

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LogOff()
        {
            logger.Debug("[Account]: LogOff");
            FormsAuthentication.SignOut();

            return RedirectToAction("Login", "Account");
        }


        //Get: /Account/Manage

        [HttpGet]
        public ActionResult Manage()
        {
            logger.Debug("[Account]: Manage");
            LocalPasswordModel model = new LocalPasswordModel();
            model.Email.Address = UserProfileContext.Current.User.Email;
            return View(model);
        }

        //Post: /Account/ChangePassword

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ChangePassword(Password model)
        {
            logger.Debug("[Account]: ChangePassword");

            WLogMembershipProvider provider = new WLogMembershipProvider();
            if (!provider.ChangePassword(User.Identity.Name, model.OldPassword, model.NewPassword))
            {
                UserProfileContext.Current.Refresh();
                ModelState.AddModelError(String.Empty, "Unable to change password. Old password provided may be uncorrect.");
                return View("Manage",new LocalPasswordModel() { Password=model });
            }
            else
            {
                return RedirectToAction("Index", "Private");
            }
            return View(new LocalPasswordModel());
        }

        //Post: /Account/ChangeEmail
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ChangeEmail(Email model)
        {
            logger.Debug("[Account]: ChangeEmail");
            if (ModelState.IsValid)
            {
               
                    UserEntity entity = RepositoryContext.Current.Users.GetByUsername(User.Identity.Name);
                    entity.Email = model.Address;
                    entity.LastActivityDate = DateTime.Now;
                RepositoryContext.Current.Users.Save(entity);

              UserProfileContext.Current.Refresh();
                return RedirectToAction("Index", "Private");
            }
            else
            {
                ModelState.AddModelError(String.Empty, "Error");
            }
            
            return View();
        }

        //Post: /Account/Info
        [HttpGet]
        public ActionResult Info()
        {
            logger.Debug("[Account]: Info");
            ViewBag.Title = UserProfileContext.Current.User.Username;
            EditUser model = new EditUser();
            model.DataUser = UserProfileContext.Current.User;
            model.Apps = UserHelper.GetApp(UserProfileContext.Current.User.Id);
            return View(model);
        }

        
        

        #region Helper
        private ActionResult RedirectToLocal(string returnUrl)
        {
            logger.Debug("[Account]: RedirectToLocal");
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToAction("Index", "Private");
            }
        }

        public enum ManageMessageId
        {
            ChangePasswordSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
        }

        
        #endregion
    }
}
