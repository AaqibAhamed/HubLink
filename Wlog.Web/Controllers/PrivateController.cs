//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using AutoMapper;
using CronExpressionDescriptor;
using NLog;
using PagedList;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Security;
using Wlog.BLL.Classes;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Classes;
using Wlog.Library.BLL.Configuration;
using Wlog.Library.BLL.Enums;
using Wlog.Library.BLL.Helpers;
using Wlog.Library.BLL.Reporitories;
using Wlog.Library.Scheduler;
using Wlog.Web.Code.Authentication;
using Wlog.Web.Code.Enums;
using Wlog.Web.Filters;
using Wlog.Web.Models;
using Wlog.Web.Models.Application;
using Wlog.Web.Models.User;
using Wlog.Web.Resources;
using Wlog.Web.Models.Dictionary;

namespace Wlog.Web.Controllers
{
    /// <summary>
    /// this controller manage all features related with 
    /// </summary>
    public class PrivateController : Controller
    {
        private static Logger _logger = LogManager.GetCurrentClassLogger();
        private readonly IJobConfigurationManager _jobManager = new JobConfigurationManager();

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.WriteLog, Constants.Roles.ReadLog)]
        public ActionResult Index()
        {

            _logger.Debug("[Private]: Index");
            string username = Membership.GetUser().UserName;
            var applicationIdsForUser = RepositoryContext.Current.Applications.GetAppplicationsByUsername(username);

            LogsSearchSettings logSearch = new LogsSearchSettings()
            {
                Applications = applicationIdsForUser.Select(x => x.Id).ToList(),
                PageNumber = 1,
                PageSize = 10
            };

            IPagedList<LogEntity> lastestLog = RepositoryContext.Current.Logs.SearchLog(logSearch);
            DashboardModel dm = new DashboardModel();
            dm.ErrorCount = RepositoryContext.Current.Logs.CountByLevel(StandardLogLevels.ERROR);
            dm.InfoCount = RepositoryContext.Current.Logs.CountByLevel(StandardLogLevels.INFO);
            dm.LogCount = RepositoryContext.Current.Logs.CountByLevel(StandardLogLevels.ALL_LEVELS);
            dm.WarnCount = RepositoryContext.Current.Logs.CountByLevel(StandardLogLevels.WARNING);
            dm.LastTen = Mapper.Map<List<LogMessage>>(lastestLog.ToList());
            dm.QueueLoad = LogQueue.Current.QueueLoad;
            dm.AppLastTen = new List<MessagesListModel>();

            IPagedList<LogEntity> logOfCurrentApp;

            foreach (ApplicationEntity application in applicationIdsForUser)
            {
                logSearch = new LogsSearchSettings()
                {
                    PageNumber = 1,
                    PageSize = 10

                };

                logSearch.Applications.Add(application.Id);
                logOfCurrentApp = RepositoryContext.Current.Logs.SearchLog(logSearch);
                MessagesListModel list = new MessagesListModel();
                list.ApplicationName = application.ApplicationName;
                list.IdApplication = application.Id;

                list.Messages = Mapper.Map<List<LogMessage>>(logOfCurrentApp.ToList());
                dm.AppLastTen.Add(list);
            }

            return View(dm);
        }

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.WriteLog, Constants.Roles.ReadLog)]
        public ActionResult Logs(Guid? applicationId, string level, string sortOrder, string sortBy, string searchMessage, int? page, int? pageSize)
        {
            _logger.Debug("[Private]: Logs");
            //TDOD: CHECK USER
            List<Guid> alloweApps = RepositoryContext.Current.Applications.GetAppplicationsIdsByUsername(Membership.GetUser().UserName);

            LogListModel mm = new LogListModel()
            {
                ApplicationId = applicationId ?? alloweApps.FirstOrDefault()
            };
            MembershipUser current = Membership.GetUser();
            mm.Apps = RepositoryContext.Current.Applications.GetAppplicationsByUsername(current.UserName);

            return View(mm);
        }

        // Get  /Private/ListUsers
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult ListUsers(string searchMessage, int? page, int? pageSize)
        {
            _logger.Debug("[Private]: ListUsers");
            ListUser model = new ListUser
            {
                SearchMessage = searchMessage
            };

            UserSearchSettings searchSettings = new UserSearchSettings
            {
                OrderBy = UserFields.Username,
                PageNumber = page ?? 1,
                PageSize = pageSize ?? 30,
                Username = searchMessage
            };

            IPagedList<UserEntity> users = RepositoryContext.Current.Users.SearchUsers(searchSettings);

            model.UserList = Mapper.Map<IPagedList<UserEntity>, IPagedList<UserData>>(users);

            return View(model);
        }

        //Get Private/EditUser/1
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult EditUser(Guid id)
        {
            _logger.Debug("[Private]: EditUser({0})", id);
            UserEntity user = RepositoryContext.Current.Users.GetById(id);
            ViewBag.Title = user.Username;
            EditUser model = new EditUser();
            model.DataUser = user;
            model.Apps = RepositoryContext.Current.Applications.GetUserApplications(id);
            return View(model);
        }

        //Post Private/EditUser/
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult EditUser(EditUser model)
        {
            _logger.Debug("[Private]: EditUser(model)");
            if (ModelState.IsValid)
            {
                try
                {

                    var profile = model.DataUser.IsAdmin ? RepositoryContext.Current.Profiles.GetProfileByName(Constants.Profiles.Admin) : RepositoryContext.Current.Profiles.GetProfileByName(Constants.Profiles.StandardUser);
                    model.DataUser.ProfileId = profile.Id;


                    RepositoryContext.Current.Users.Save(model.DataUser);

                    List<AppUserRoleEntity> newRoleList = new List<AppUserRoleEntity>();

                    foreach (UserApplication application in model.Apps)
                    {
                        if (application.RoleId != Guid.Empty)
                        {
                            newRoleList.Add(new AppUserRoleEntity { UserId = model.DataUser.Id, ApplicationId = application.IdApplication, RoleId = application.RoleId });
                        }
                    }

                    RepositoryContext.Current.Applications.ResetUserRoles(model.DataUser, newRoleList);

                    return RedirectToAction("ListUsers");
                }
                catch (Exception e)
                {
                    ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);
                }
            }
            ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);

            return View(model);
        }

        //Get Private/NewUser
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult NewUser()
        {
            _logger.Debug("[Private]: NewUser()");
            return View(new NewUser());
        }

        //Post Private/NewUser
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult NewUser(NewUser user)
        {
            _logger.Debug("[Private]: NewUser(user)");
            if (ModelState.IsValid)
            {
                try
                {
                    MembershipCreateStatus status;
                    WLogMembershipProvider provider = new WLogMembershipProvider();
                    provider.CreateUser(user.UserName, user.Password, user.Email, null, null, true, null, out status);
                    if (status == MembershipCreateStatus.Success)
                    {
                        UserEntity entity = RepositoryContext.Current.Users.GetByUsername(user.UserName);
                        entity.IsAdmin = RepositoryContext.Current.Profiles.IsProfileIdAdmin(user.Profile);
                        entity.ProfileId = user.Profile;
                        RepositoryContext.Current.Users.Save(entity);
                        return RedirectToAction("EditUser", "Private", new { Id = entity.Id });
                    }
                    else
                    {
                        ModelState.AddModelError(String.Empty, ErrorCodeToString(status));
                    }

                }
                catch (MembershipCreateUserException e)
                {
                    ModelState.AddModelError(String.Empty, ErrorCodeToString(e.StatusCode));
                }
            }

            // Se si arriva a questo punto, significa che si è verificato un errore, rivisualizzare il form
            return View(user);
        }

        //Get Private/DeleteUser/1
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult DeleteUser(Guid id)
        {
            _logger.Debug("[Private]: DeleteUser({0})", id);

            UserEntity user = RepositoryContext.Current.Users.GetById(id);
            UserData result = new UserData
            {
                Id = user.Id,
                Email = user.Email,
                Username = user.Username,
                CreationDate = user.CreationDate,
                IsAdmin = user.IsAdmin,
                IsOnLine = user.IsOnLine,
                LastLoginDate = user.LastLoginDate
            };
            return View(result);
        }

        //Post Private/DeleteUser/1
        [HttpPost]
        [AuthorizeRoles(Constants.Roles.Admin)]
        public ActionResult DeleteUser(UserData user)
        {
            _logger.Debug("[Private]: DeleteUser(userdata)");

            if (RepositoryContext.Current.Users.DeleteUserById(user.Id))
            {
                return RedirectToAction("ListUsers");
            }
            else
            {
                ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);
            }

            return View(user);
        }

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.WriteLog, Constants.Roles.ReadLog)]
        public ActionResult Dictionary(Guid? applicationId, string level, string sortOrder, string sortBy, string searchMessage, int? page, int? pageSize)
        {
            _logger.Debug("[Private]: Logs");
            //TDOD: CHECK USER
            List<Guid> alloweApps = RepositoryContext.Current.Applications.GetAppplicationsIdsByUsername(Membership.GetUser().UserName);

            LogListModel mm = new LogListModel()
            {
                ApplicationId = applicationId ?? alloweApps.FirstOrDefault()
            };
            MembershipUser current = Membership.GetUser();
            mm.Apps = RepositoryContext.Current.Applications.GetAppplicationsByUsername(current.UserName);

            return View(mm);
        }


        #region Dictionary

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult DeleteDictionaryItemById(Guid id)
        {
            var result = new JsonResult();
            result.JsonRequestBehavior = JsonRequestBehavior.AllowGet;

            try
            {
                var value = RepositoryContext.Current.KeyPairRepository.GetById(id);

                RepositoryContext.Current.KeyPairRepository.Delete(value);

                result.Data = value;
            }
            catch (Exception err)
            {
                _logger.Error(err);
                result.Data = new { error = true, message = err.Message };
            }

            return result;
        }


        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult GetDictionaryItemById(Guid id)
        {
            var result = new JsonResult();
            result.JsonRequestBehavior = JsonRequestBehavior.AllowGet;





            try
            {
                var value = RepositoryContext.Current.KeyPairRepository.GetById(id);

                result.Data = value;
            }
            catch (Exception err)
            {
                _logger.Error(err);
                result.Data = new { error = true, message = err.Message };
            }

            return result;
        }

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult GetDictionaryItem(Guid dictionaryId, string key)
        {

            var result = new JsonResult();
            result.JsonRequestBehavior = JsonRequestBehavior.AllowGet;

          
           


            try
            {
                var value=RepositoryContext.Current.KeyPairRepository.GetByKey(dictionaryId, key);

                result.Data = value;
            }
            catch (Exception err)
            {
                _logger.Error(err);
                result.Data = new { error = true, message = err.Message };
            }

            return result;
        }
        [HttpPost]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult SaveDictionaryItem(KeyValueItemModel itemToSave)
        {
            var appId= new Guid(itemToSave.ApplicationId);
            List<Guid> alloweApps = RepositoryContext.Current.Applications.GetAppplicationsIdsByUsername(Membership.GetUser().UserName);
            
            if (!alloweApps.Contains(appId)) throw new Exception("Application Not Allowed");


            var dictionary=RepositoryContext.Current.KeyPairRepository.GetDictionaries(appId, itemToSave.DictionaryName, 0, 1);
            if (dictionary == null || dictionary.Count!=1) throw new Exception("Dictionary not found");

            var result = new JsonResult();

            try
            {
                RepositoryContext.Current.KeyPairRepository.Save(dictionary[0].Id, itemToSave.ItemKey, itemToSave.ItemValue);

                result.Data = new { error = false, message = "" };
            }
            catch (Exception err)
            {
                _logger.Error(err);
                result.Data = new { error = true, message = err.Message};
            }

            return result;

        }

        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult SearchDictionary(Guid? applicationId, string sortOrder, string sortBy, string key, int page, int pageSize)
        {
            _logger.Debug("[Private]: Search");
            //TDOD: CHECK USER
            var result = new JsonResult();

      
            if (!applicationId.HasValue)
            {
                throw new Exception("Missing app id");
            }

            List<Guid> alloweApps = RepositoryContext.Current.Applications.GetAppplicationsIdsByUsername(Membership.GetUser().UserName);
            if (!alloweApps.Contains(applicationId.Value)) throw new Exception("Application Not Allowed");


            var dict =RepositoryContext.Current.KeyPairRepository.GetDictionaries(applicationId.Value, Constants.DictionaryNames.Main, 0, 0);
            if (dict == null || dict.Count != 1) throw new Exception("unexpected number of dictionaries");



            IPagedList list = RepositoryContext.Current.KeyPairRepository.Search(dict[0].Id, key, (page-1) * pageSize, pageSize);
            result.JsonRequestBehavior = JsonRequestBehavior.AllowGet;

            result.Data = new
            {
                draw = Request["draw"],
                recordsTotal = list.TotalItemCount,
                recordsFiltered = list.TotalItemCount,
                data = list
            };
            return result;
        }
        #endregion

            #region Logs
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public JsonResult Search(Guid? applicationId, string sortOrder, string sortBy, string searchMessage, int page, int pageSize)
        {

            _logger.Debug("[Private]: Search");
            //TDOD: CHECK USER
            var result = new JsonResult();

            LogsSearchSettings lss = new LogsSearchSettings();
            if (applicationId.HasValue)
            {
                lss.Applications = new List<Guid>();
                lss.Applications.Add(applicationId.Value);
            }
            lss.OrderBy = sortBy;
            lss.PageNumber = page;
            lss.PageSize = pageSize;
            lss.FullTextQuery = searchMessage ?? "";
            lss.SortDirection = ("ASC".Equals(sortOrder, StringComparison.InvariantCultureIgnoreCase)) ? SortDirection.ASC : SortDirection.DESC;

            IPagedList list = RepositoryContext.Current.Logs.SearchLogindex(applicationId.Value, lss);

            result.JsonRequestBehavior = JsonRequestBehavior.AllowGet;

            result.Data = new
            {
                draw = Request["draw"],
                recordsTotal = list.TotalItemCount,
                recordsFiltered = list.TotalItemCount,
                data = list
            };
            return result;
        }

        #endregion

        #region Application
        // Get  /Private/ListApps
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.ReadLog)]
        public ActionResult ListApps(string searchMessage, int? page, int? pageSize)
        {
            _logger.Debug("[Private]: ListApps({0},{1},{2})", searchMessage, page, pageSize);
            string username = Membership.GetUser().UserName;

            ApplicationList model = new ApplicationList
            {
                SearchMessage = searchMessage
            };
            
            ApplicationSearchSettings settings = new ApplicationSearchSettings()
            {
                Orderby = ApplicationFields.ApplicationName,
                PageNumber = page ?? 1,
                PageSize = pageSize ?? 30,
                SerchFilter = searchMessage,
                UserName = username
            };

            IPagedList<ApplicationEntity> queryResult = RepositoryContext.Current.Applications.Search(settings);
            model.AppList = Mapper.Map<IPagedList<ApplicationEntity>, IPagedList<ApplicationModel>>(queryResult);

            return View(model);
        }

        //Get Private/NewApp
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult NewApp()
        {
            _logger.Debug("[Private]: NewApp()");
            return View(new ApplicationModel());
        }

        //Post Private/NewApp
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult NewApp(ApplicationModel model)
        {
            _logger.Debug("[Private]: NewApp(model)");
            if (ModelState.IsValid)
            {
                ApplicationEntity entity = new ApplicationEntity();
                entity.ApplicationName = model.ApplicationName;
                entity.IsActive = true;
                entity.StartDate = DateTime.Now;
                entity.PublicKey = model.PublicKey;
                entity.PublicKey = Guid.NewGuid();
                RepositoryContext.Current.Applications.Save(entity);

                UserEntity user = RepositoryContext.Current.Users.GetByUsername(Membership.GetUser().UserName);

                if (!user.IsAdmin)
                {
                    var role = RepositoryContext.Current.Roles.GetAllRolesForUser(user).SingleOrDefault(x => x.RoleName == Constants.Roles.CreateApp);
                    RepositoryContext.Current.Applications.AssignRoleToUser(entity, user, role);
                }

                return RedirectToAction("ListApps");
            }
            else
            {
                ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);
            }

            return View(model);
        }

        //Get Private/EditApp/1
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult EditApp(Guid id)
        {
            _logger.Debug("[Private]: EditApp({0})", id);
            ApplicationModel application = GetApplicationModel(id);

            return View(application);
        }

        //Post Private/EditApp/
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult EditApp(ApplicationModel model)
        {
            _logger.Debug("[Private]: EditApp(model)");
            if (ModelState.IsValid)
            {
                ApplicationEntity entity = RepositoryContext.Current.Applications.GetById(model.IdApplication);
                entity.ApplicationName = model.ApplicationName;
                entity.IsActive = model.IsActive;
                if (entity.IsActive)
                {
                    entity.EndDate = null;
                }
                else if (!entity.IsActive && entity.EndDate == null)
                {
                    entity.EndDate = DateTime.Now;
                }
                //entity.PublicKey=model.PublicKey; Do not change this is not editable
                RepositoryContext.Current.Applications.Save(entity);
                return RedirectToAction("ListApps");
            }
            else
            {
                ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);
            }

            return View(model);
        }

        //Get Private/DeleteApp/1
        [HttpGet]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult DeleteApp(Guid id)
        {
            _logger.Debug("[Private]: DeleteApp({0})", id);
            ApplicationModel application = GetApplicationModel(id);

            return View(application);
        }

        //Post Private/DeleteApp/1
        [HttpPost]
        [AuthorizeRoles(Constants.Roles.Admin, Constants.Roles.CreateApp)]
        public ActionResult DeleteApp(ApplicationModel model)
        {
            _logger.Debug("[Private]: DeleteApp(model)");

            if (RepositoryContext.Current.Applications.DeleteApplicationById(model.IdApplication))
            {
                return RedirectToAction("ListApps");
            }
            else
            {
                ModelState.AddModelError(String.Empty, Labels.ErrorOccurred);
            }
            return View(model);
        }

        #endregion

        #region Helper
        private static string ErrorCodeToString(MembershipCreateStatus createStatus)
        {
            _logger.Debug("[Private]: ErrorCodeToString({0})", createStatus);
            // see http://go.microsoft.com/fwlink/?LinkID=177550 
            switch (createStatus)
            {
                case MembershipCreateStatus.DuplicateUserName:
                    return Labels.DuplicateUserName;

                case MembershipCreateStatus.DuplicateEmail:
                    return Labels.DuplicateEmail;

                case MembershipCreateStatus.InvalidPassword:
                    return Labels.InvalidPassword;

                case MembershipCreateStatus.InvalidEmail:
                    return Labels.InvalidEmail;

                case MembershipCreateStatus.InvalidAnswer:
                    return Labels.InvalidAnswer;

                case MembershipCreateStatus.InvalidQuestion:
                    return Labels.InvalidQuestion;

                case MembershipCreateStatus.InvalidUserName:
                    return Labels.InvalidUserName;

                case MembershipCreateStatus.ProviderError:
                    return Labels.ProviderError;

                case MembershipCreateStatus.UserRejected:
                    return Labels.UserRejected;

                default:
                    return Labels.UnknownAuthorizationError;
            }
        }

        private ApplicationModel GetApplicationModel(Guid id)
        {
            ApplicationEntity applicationEntity = RepositoryContext.Current.Applications.GetById(id);

            return Mapper.Map<ApplicationModel>(applicationEntity);
        }
        #endregion

        #region Info

        //Get Private/info
        public ActionResult Info()
        {
            var model = InfoHelper.GetInfoPage(InfoPageConfigurator.Configuration);
            return View(model);
        }
        #endregion

        #region Background Jobs

        public ActionResult BackgroundJobs()
        {
            var models = RepositoryContext.Current.JobDefinition.GetAllDefinitionsAndInstances();

            return View(models);
        }

        [HttpPost]
        public ActionResult ManageBackgroundJobs(JobConfiguration item, ButtonCommands command)
        {
            try
            {
                ExpressionDescriptor.GetDescription(item.CronExpression);
                switch (command)
                {
                    case ButtonCommands.Run:
                        _jobManager.RunJobInstance(item);
                        break;
                    case ButtonCommands.Edit:
                        _jobManager.UpdateJobInstance(item);
                        break;
                    default:
                        break;
                }
            }
            catch (FormatException)
            {
                ModelState.AddModelError("Error", Labels.InvalidCron);
            }
            catch (Exception ex)
            {
                _logger.Error(ex);
                ModelState.AddModelError("Error", Labels.ErrorJobManagement);
            }

            var models = RepositoryContext.Current.JobDefinition.GetAllDefinitionsAndInstances();
            return View("BackgroundJobs", models);
        }

        #endregion
    }
}
