//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using NHibernate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Security;
using Wlog.Web.Code.Helpers;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Reporitories;
using NLog;
using Wlog.Library.BLL.Utils;

namespace Wlog.Web.Code.Authentication
{

    /// <summary>
    /// this classes implement membersghip provider that provide user autentication
    /// </summary>
    public class WLogMembershipProvider : MembershipProvider
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        public override string ApplicationName
        {
            get
            {
                return "WLog";
            }
            set
            {
                throw new NotImplementedException();
            }
        }

        public override bool ChangePassword(string username, string oldPassword, string newPassword)
        {
            logger.Debug("[WLogMembershipProvider] Change password");
            bool result = false;
            try
            {
                if (ValidateUser(username, oldPassword))
                {
                    ValidatePasswordEventArgs args = new ValidatePasswordEventArgs(username, newPassword, false);
                    OnValidatingPassword(args);
                    if (!args.Cancel)
                    {

                        UserEntity usr = RepositoryContext.Current.Users.GetByUsername(username);
                        usr.Password = EncodePassword(newPassword);
                        usr.LastActivityDate = DateTime.Now;
                        usr.LastPasswordChangedDate = DateTime.Now;
                        RepositoryContext.Current.Users.Save(usr);

                        result = true;

                    }
                }
               
            }
            catch(Exception err)
            {
                logger.Error(err);
            }

            return result;
        }

        public override bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
        {
            logger.Debug("[WLogMembershipProvider] ChangePasswordQuestionAndAnswer (not implemented)");
            throw new NotImplementedException();
        }

        public override MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, 
            string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status)
        {

            logger.Debug("[WLogMembershipProvider] CreateUser ");
            ValidatePasswordEventArgs args = new ValidatePasswordEventArgs(username, password, true);

            OnValidatingPassword(args);
            if (args.Cancel)
            {
                status = MembershipCreateStatus.InvalidPassword;
                return null;
            }

            if (RequiresUniqueEmail && GetUserNameByEmail(email) != String.Empty)
            {
                status = MembershipCreateStatus.DuplicateEmail;
                return null;
            }

            MembershipUser u = GetUser(username, false);

            if (u == null)
            {
                DateTime createDate = DateTime.Now;


                UserEntity user = new UserEntity();
                user.Username = username;
                user.Password = EncodePassword(password);
                user.Email = email;
                user.IsAdmin = false;
                user.PasswordQuestion = passwordQuestion;
                user.PasswordAnswer = passwordAnswer;//EncodePassword(passwordAnswer);
                user.IsApproved = isApproved;
                user.CreationDate = createDate;
                user.LastPasswordChangedDate = createDate;
                user.LastActivityDate = createDate;
                user.IsLockedOut = false;
                user.LastLockedOutDate = createDate;

                try
                {
                    RepositoryContext.Current.Users.Save(user);

                    if (Guid.Empty.CompareTo(user.Id) == 0)
                    {
                        status = MembershipCreateStatus.UserRejected;
                    }
                    else
                    {
                        status = MembershipCreateStatus.Success;
                    }
                }
                catch (Exception e)
                {
                    status = MembershipCreateStatus.ProviderError;
                    logger.Error(e);
                }
                

                return GetUser(username, false);
            }
            else
            {
                status = MembershipCreateStatus.DuplicateUserName;
            }
            return null;
        }

        public override bool DeleteUser(string username, bool deleteAllRelatedData)
        {
            logger.Debug("[WLogMembershipProvider] DeleteUser (not implemented) ");
            throw new NotImplementedException();
        }

        public override bool EnablePasswordReset
        {
           
            get { logger.Debug("[WLogMembershipProvider] EnablePasswordReset (not implemented) "); throw new NotImplementedException(); }
        }

        public override bool EnablePasswordRetrieval
        {
            get { logger.Debug("[WLogMembershipProvider] EnablePasswordRetrieval (not implemented) "); throw new NotImplementedException(); }
        }

        public override MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            logger.Debug("[WLogMembershipProvider] FindUsersByEmail (not implemented) ");
            throw new NotImplementedException();
        }

        public override MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            logger.Debug("[WLogMembershipProvider] MembershipUserCollection (not implemented) ");
            throw new NotImplementedException();
        }

        public override MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords)
        {
            logger.Debug("[WLogMembershipProvider] MembershipUserCollection (not implemented) ");
            throw new NotImplementedException();
        }

        public override int GetNumberOfUsersOnline()
        {
            logger.Debug("[WLogMembershipProvider] GetNumberOfUsersOnline (not implemented) ");
            throw new NotImplementedException();
        }

        public override string GetPassword(string username, string answer)
        {
            logger.Debug("[WLogMembershipProvider] GetPassword (not implemented) ");
            throw new NotImplementedException();
        }

        public override MembershipUser GetUser(string username, bool userIsOnline)
        {
            logger.Debug("[WLogMembershipProvider] GetUser({0},{1})  ",username,userIsOnline);
            UserEntity usr = RepositoryContext.Current.Users.GetByUsername(username);
            if (usr == null)
            {
                return null;
            }
            return GetMembershipUserFromUser(usr);
        }

        public override MembershipUser GetUser(object providerUserKey, bool userIsOnline)
        {
            logger.Debug("[WLogMembershipProvider] GetUser({0},{1})  ", providerUserKey, userIsOnline);
            UserEntity usr = RepositoryContext.Current.Users.GetByUsername(providerUserKey as string);
            return GetMembershipUserFromUser(usr);
        }

        public override string GetUserNameByEmail(string email)
        {
            logger.Debug("[WLogMembershipProvider] GetUser({0})  ", email);
            string result = string.Empty;
            UserEntity user = RepositoryContext.Current.Users.GetByEmail(email);
            if (user != null)
            {
                result = user.Username;
            }
            return result;
        }

        public override int MaxInvalidPasswordAttempts
        {
            get { return 10; }
        }

        public override int MinRequiredNonAlphanumericCharacters
        {
            get { throw new NotImplementedException(); }
        }

        public override int MinRequiredPasswordLength
        {
            get { throw new NotImplementedException(); }
        }

        public override int PasswordAttemptWindow
        {
            get { throw new NotImplementedException(); }
        }

        public override MembershipPasswordFormat PasswordFormat
        {
            get { return MembershipPasswordFormat.Hashed; }
        }

        public override string PasswordStrengthRegularExpression
        {
            get { throw new NotImplementedException(); }
        }

        public override bool RequiresQuestionAndAnswer
        {
            get { return false; }
        }

        public override bool RequiresUniqueEmail
        {
            get { return true; }
        }

        public override string ResetPassword(string username, string answer)
        {
            throw new NotImplementedException();
        }

        public override bool UnlockUser(string userName)
        {
            throw new NotImplementedException();
        }

        public override void UpdateUser(MembershipUser user)
        {
            logger.Debug("[WLogMembershipProvider] UpdateUser  ");
            UserEntity entity = RepositoryContext.Current.Users.GetByUsername(user.UserName);
            if (entity != null)
            {
                entity.Email = user.Email;
                entity.LastActivityDate = DateTime.Now;
                RepositoryContext.Current.Users.Save(entity);
            }
        }

        public override bool ValidateUser(string username, string password)
        {
            logger.Debug("[WLogMembershipProvider] ValidateUser  ");
            bool isValid = false;
            UserEntity user = RepositoryContext.Current.Users.GetByUsername(username);

            if (user == null)
            {
                return isValid;
            }

            string pswEncode = EncodePassword(password);

            if (pswEncode == user.Password)
            {
                isValid = true;
                user.LastLoginDate = DateTime.Now;
                RepositoryContext.Current.Users.Save(user);
            }

            return isValid;
        }


        private string EncodePassword(string password)
        {
            return PasswordManagement.EncodePassword(password);
        }

        /// <summary>
        /// Return the MembershipUser from User Entity
        /// </summary>
        /// <param name="usr"></param>
        /// <returns></returns>
        private MembershipUser GetMembershipUserFromUser(UserEntity usr)
        {

            logger.Debug("[WLogMembershipProvider] GetMembershipUserFromUser  ");

            MembershipUser u = new MembershipUser("WLogMembershipProvider",
                                                  usr.Username,
                                                  usr.Id,
                                                  usr.Email,
                                                  usr.PasswordQuestion,
                                                  String.Empty,
                                                  usr.IsApproved,
                                                  usr.IsLockedOut,
                                                  usr.CreationDate,
                                                  usr.LastLoginDate,
                                                  usr.LastActivityDate,
                                                  usr.LastPasswordChangedDate,
                                                  usr.LastLockedOutDate);

            return u;
        }
    }
}