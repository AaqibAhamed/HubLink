//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using NLog;
using System;
using System.Web.Http;
using Wlog.BLL.Classes;
using Wlog.Library.BLL.Reporitories;
using Wlog.Library.Scheduler;
using Wlog.Web.Resources;

namespace Wlog.Web.Code.API
{
    /// <summary>
    /// controller that collect logs from clients
    /// </summary>
    [AllowAnonymous]
    public class LogController : ApiController
    {
        private readonly Logger _logger = LogManager.GetCurrentClassLogger();

        /// <summary>
        /// This add a list of  log entry to the queue to be processed async.
        /// In case queue is full, this will be managed sync 
        /// </summary>
        /// <param name="values">list of logs</param>
        public void Post([FromBody]LogMessage[] values)
        {
            _logger.Debug("[ApiLog] Post");
            if (values == null) throw new Exception(Labels.LogMessageNull);

            //Force init in case we are not in  IIS "always running mode", or it have not been configured properly
            HangfireBootstrapper.Instance.Start();

            for (int i = 0; i < values.Length; i++)
            {
                SaveSingle(values[i]);
            }
        }

        /// <summary>
        /// Private method that save one item
        /// </summary>
        /// <param name="value"></param>
        private void SaveSingle(LogMessage value)
        {
            if (value == null) throw new Exception(Labels.LogMessageNull);

            if (LogQueue.Current.MaxQueueSize > LogQueue.Current.Count)
            {
                LogQueue.Current.Enqueue(value);
            }
            else
            {
                RepositoryContext.Current.Logs.Save(LogQueue.ConvertToLoEntities(value,null));
            }
        }
    }
}