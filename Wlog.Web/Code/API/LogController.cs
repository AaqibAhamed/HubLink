//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using NHibernate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Principal;
using System.Threading;
using System.Web;
using System.Web.Http;
using Wlog.BLL.Classes;
using Wlog.Library.BLL.Reporitories;
using Wlog.Library.Scheduler;
using NLog;

namespace Wlog.Web.Code.API
{
    [AllowAnonymous]
    public class LogController : ApiController
    {

        private static Logger logger = LogManager.GetCurrentClassLogger();

        /// <summary>
        /// This add a list of  log entry to the queue to be processed async.
        /// In case queue is full, this will be managed sync 
        /// </summary>
        /// <param name="values">list of logs</param>
        public void Post([FromBody]LogMessage[] values)
        {
            logger.Debug("[ApiLog] Post");
            if (values == null) throw new Exception("Log messages could not be null.");

            //Force init in case we are not in  IIS "always running mode", or it have not been configured properly
            HangfireBootstrapper.Instance.Start();

            for (int i = 0; i < values.Length; i++)
            {
                SaveSingle(values[i]);
            }

        }



        private void SaveSingle(LogMessage value)
        {
            if (value == null) throw new Exception("Log message could not be null.");

            if (LogQueue.Current.MaxQueueSize > LogQueue.Current.Count)
            {
                LogQueue.Current.Enqueue(value);
            }
            else
            {
                RepositoryContext.Current.Logs.Save(LogQueue.ConvertToLoEntities(value,null));
            }

        }

    }
}