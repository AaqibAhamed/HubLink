//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using PagedList;
using Wlog.Web.Models.User;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Reporitories;
using Wlog.Library.BLL.Classes;
using System.Web.Mvc;
using NLog;

namespace Wlog.Web.Code.Helpers
{
    [Obsolete]
    public class UserHelper
    {

        private static Logger logger = LogManager.GetCurrentClassLogger();

        [Obsolete]
        public static IPagedList<UserData> FilterUserList(string serchFilter, int pagenumber, int pagesize)
        {
            logger.Debug("[UserHelper]: FilterUserList");
            List<UserData> data = new List<UserData>();
            IPagedList<UserEntity> users = RepositoryContext.Current.Users.SearchUsers(new UserSearchSettings
            {
                OrderBy = Library.BLL.Enums.UserFields.Username,
                PageNumber = pagenumber,
                PageSize = pagesize,
                Username = serchFilter
            });

            foreach (UserEntity e in users)
            {
                data.Add(new UserData
                {
                    Id = e.Id,
                    Username = e.Username,
                    Email = e.Email,
                    IsAdmin = e.IsAdmin,
                    LastLoginDate = e.LastLoginDate,
                    CreationDate = e.CreationDate,
                    IsOnLine = e.IsOnLine
                });
            }

            return new PagedList<UserData>(data, pagenumber, pagesize);
        }

        /// <summary>
        /// Update the User
        /// </summary>
        /// <param name="usr"></param>
        /// <returns></returns>
        /// 
        //[Obsolete]
        //public static bool UpdateUser(UserEntity user)
        //{
        //    logger.Debug("[UserHelper]: UpdateUser");
        //    if (user.IsAdmin)
        //    {
        //        logger.Debug("[UserHelper]: Reset profile because (admin cannot be changed?)");
        //        user.ProfileId = GetProfileByName("admin").Id;
        //    }

        //    return RepositoryContext.Current.Users.Save(user);
        //}

        /// <summary>
        /// given a user return list of app with role
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [Obsolete]
        public static List<UserApps> GetApp(Guid id)
        {
            logger.Debug("[UserHelper]: GetApp");
            List<UserApps> result = new List<UserApps>();

            UserEntity user = RepositoryContext.Current.Users.GetById(id);
            List<ApplicationEntity> apps = RepositoryContext.Current.Applications.GetAppplicationForUser(user);
            List<RolesEntity> roles = RepositoryContext.Current.Roles.GetAllRoles();
            List<AppUserRoleEntity> appForUser = RepositoryContext.Current.Roles.GetApplicationRolesForUser(user);

            AppUserRoleEntity current;
            RolesEntity r;
            foreach (ApplicationEntity ae in apps)
            {

                current = appForUser.FirstOrDefault(x => x.ApplicationId == ae.Id);
                if (current != null)
                {
                    r = roles.FirstOrDefault(x => x.Id == current.RoleId);
                    result.Add(new UserApps
                    {
                        ApplicationName = ae.ApplicationName,
                        IdApplication = ae.Id,
                        RoleId = r.Id,
                        RoleName = r.RoleName
                    });
                }
                else
                {
                    result.Add(new UserApps
                    {
                        ApplicationName = ae.ApplicationName,
                        IdApplication = ae.Id,
                        RoleId = Guid.Empty,
                        RoleName = "No Role"
                    });
                }
            }

            return result;
        }

        [Obsolete]

        public static IEnumerable<SelectListItem> GetAllUserProfiles()
        {
            logger.Debug("[UserHelper]: GetAllUserProfiles");
            var profiles = from a in RepositoryContext.Current.Profiles.GetAllProfiles()
                           select new SelectListItem
                           {
                               Value = a.Id.ToString(),
                               Text = a.ProfileName
                           };

            return profiles;
        }

        //[Obsolete]
        //public static bool IsUserAdmin(Guid profileGuid)
        //{
        //    logger.Debug("[UserHelper]: IsUserAdmin");
        //    return GetProfileByName("admin").Id == profileGuid;
        //}
        //[Obsolete]
        //private static ProfilesEntity GetProfileByName(string name)
        //{
        //    logger.Debug("[UserHelper]: GetProfileByName");
        //    return RepositoryContext.Current.Profiles.GetAllProfiles().SingleOrDefault(x => x.ProfileName.ToLower() == name);
        //}
    }
}