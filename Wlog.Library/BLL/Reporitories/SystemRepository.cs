//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NLog;
using Wlog.DAL.NHibernate.Helpers;
using Wlog.Library.BLL.Classes;
using Wlog.Library.BLL.DataBase;
using Wlog.Library.BLL.Interfaces;
using System.Reflection;
using Wlog.Library.BLL.Helpers;
using Wlog.BLL.Entities;

namespace Wlog.Library.BLL.Reporitories
{
    /// <summary>
    /// Repository used to apply schema changes.
    /// </summary>
    public class SystemRepository : IRepository
    {

        public Type GetEntityType()
        {
            throw new Exception("SystemRepository dont manage entities");
        }

        public static Logger logger { get { return LogManager.GetCurrentClassLogger(); } }
        public SystemRepository()
        {

        }

        public void Dispose()
        {
            
        }


        /// <summary>
        /// Apply schema changes
        /// </summary>
        public void ApplySchemaChanges()
        {
            //TODO: what in case of mongo? in that case we should create collection insthead of tables.
            logger.Debug("[repo] entering ApplySchemaChanges");
            var uof = new UnitFactory();
            var unit = uof.GetUnit(RepositoryContext.Current.Applications);

            if (unit is UnitOfMongo)
            {
                Assembly entityAssembly = Assembly.GetAssembly(typeof(LogEntity));
                Type[] classes = ReflectionHelper.GetTypesInNamespace(entityAssembly, "Wlog.Library.BLL.Reporitories");

                foreach (Type repoClass in classes)
                {
                    try
                    {
                        object o = Activator.CreateInstance(repoClass);
                        if (o is IRepository && !(o is SystemRepository))
                        {

                            var enitityType = ((IRepository)o).GetEntityType();

                            string collectionName = enitityType.Name;

                            //Create collection
                            MongoContext.Current.CreateCollectionIfNotExists(collectionName);
                        }
                    }
                    catch (Exception err)
                    {
                        logger.Warn("Unable to create collection for repo" + repoClass.FullName, err);
                    }
                }
            }
            else if (unit is UnitFactory)
            {
                NHibernateContext.ApplySchemaChanges();
            }
            else
            {
                throw new Exception("Unkwnow unit type");
            }
        }

    }
}
