//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PagedList;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Classes;
using Wlog.Library.BLL.Enums;
using Wlog.Library.BLL.Interfaces;
using Wlog.DAL.NHibernate.Helpers;
using Wlog.Library.BLL.DataBase;
using Wlog.BLL.Classes;

namespace Wlog.Library.BLL.Reporitories
{
    public class LogRepository : EntityRepository
    {
        public LogRepository()
        {

        }

        public long CountByLevel(StandardLogLevels level)
        {
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                return uow.Query<LogEntity>()
                    .Count(p => level == StandardLogLevels.ALL_LEVELS || (p.Level != null && p.Level.ToLower().Contains(level.ToString())));
            }
        }

        public bool Save(LogEntity entToSave)
        {
            try
            {
                using (IUnitOfWork uow = BeginUnitOfWork())
                {
                    uow.BeginTransaction();
                    uow.SaveOrUpdate(entToSave);
                    uow.Commit();
                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public IPagedList<LogEntity> SeachLog(LogsSearchSettings logsSearchSettings)
        {
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                IEnumerable<LogEntity> query = uow.Query<LogEntity>().Where(x => logsSearchSettings.Applications.Contains(x.ApplictionId));



                if (!String.IsNullOrWhiteSpace(logsSearchSettings.SerchMessage))
                {
                    query = query.Where(p => (logsSearchSettings.SerchMessage != null && p.Message != null && p.Message.ToLower().Contains(logsSearchSettings.SerchMessage)));

                }

                if (logsSearchSettings.SortDirection == SortDirection.ASC)
                {
                    switch (logsSearchSettings.OrderBy)
                    {
                        case LogsFields.SourceDate:
                            query = query.OrderBy(l => l.SourceDate);
                            break;
                        case LogsFields.Message:
                            query = query.OrderBy(l => l.Message);
                            break;
                        case LogsFields.Level:
                            query = query.OrderBy(l => l.Level);
                            break;
                    }
                }
                else
                {
                    switch (logsSearchSettings.OrderBy)
                    {
                        case LogsFields.SourceDate:
                            query = query.OrderByDescending(l => l.SourceDate);
                            break;
                        case LogsFields.Message:
                            query = query.OrderByDescending(l => l.Message);
                            break;
                        case LogsFields.Level:
                            query = query.OrderByDescending(l => l.Level);
                            break;
                    }
                }

                int count = query.Count();


                query = query.Skip((logsSearchSettings.PageNumber - 1) * logsSearchSettings.PageSize);
                query = query.Take(logsSearchSettings.PageSize);

                IPagedList<LogEntity> result = new StaticPagedList<LogEntity>(query.ToList(), logsSearchSettings.PageNumber, logsSearchSettings.PageSize, count);

                return result;
            }
        }

        public bool MoveLogsToBin(IEnumerable<LogEntity> logs)
        {
            try
            {
                using (IUnitOfWork uow = BeginUnitOfWork())
                {
                    uow.BeginTransaction();

                    foreach (LogEntity log in logs)
                    {
                        uow.Delete(log);

                        DeletedLogEntity deletedLog = new DeletedLogEntity()
                        {
                            ApplictionId = log.ApplictionId,
                            DeletedOn = DateTime.UtcNow,
                            CreateDate = log.CreateDate,
                            Level = log.Level,
                            Message = log.Message,
                            SourceDate = log.SourceDate,
                            UpdateDate = log.UpdateDate,
                            LogId = log.Uid
                        };

                        uow.SaveOrUpdate(deletedLog);
                    }

                    uow.Commit();
                }

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public void RemoveLogEntity(LogEntity log)
        {
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                uow.Delete(log);
                uow.Commit();
            }
        }

        public List<LogEntity> GetAllLogEntities()
        {
            List<LogEntity> result = new List<LogEntity>();
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                result = uow.Query<LogEntity>().ToList();
            }

            return result;
        }

        public List<LogEntity> GetLogsForBinJob(int daysToKeep, int rowsToKeep)
        {
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                var entitiesToKeep = uow.Query<LogEntity>().Where(x => x.SourceDate > (DateTime.UtcNow.AddDays(-daysToKeep)))
                    .OrderByDescending(x => x.SourceDate).Take(rowsToKeep).ToList();
                return uow.Query<LogEntity>().Where(x => !entitiesToKeep.Contains(x)).ToList();
            }
        }

        public void Run()
        {
            LogQueue.Current.AppendLoadValue(LogQueue.Current.Count, LogQueue.Current.MaxQueueSize);

            if (LogQueue.Current.Count > 0)
            {
                using (IUnitOfWork uow = BeginUnitOfWork())
                {
                    uow.BeginTransaction();

                    for (int i = 0; i < Math.Min(LogQueue.Current.Count, LogQueue.Current.MaxProcessedItems); i++)
                    {

                        LogMessage log = LogQueue.Current.Dequeue();
                    }

                    uow.Commit();
                }

                LogQueue.Current.AppendLoadValue(LogQueue.Current.Count, LogQueue.Current.MaxQueueSize);
            }
        }
    }
}
