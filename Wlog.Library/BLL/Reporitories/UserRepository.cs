//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PagedList;
using Wlog.BLL.Entities;
using Wlog.Library.BLL.Classes;
using Wlog.Library.BLL.Interfaces;
using Wlog.Library.BLL.DataBase;
using Wlog.DAL.NHibernate.Helpers;
using MongoDB.Driver.Linq;

namespace Wlog.Library.BLL.Reporitories
{
    /// <summary>
    /// Repo used to store user
    /// </summary>
    public class UserRepository : EntityRepository<UserEntity>
    {


        public UserRepository()
        {

        }

        /// <summary>
        /// Get user by user id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public UserEntity GetById(Guid id)
        {
            logger.Debug("[repo] entering GetById");
            return this.FirstOrDefault(x => x.Id.Equals(id));
        }

        public bool DeleteUserById(Guid id)
        {
            var user = GetById(id);
            if (user == null)
            {
                return false;
            }

            return Delete(user);
        }

        /// <summary>
        /// Delete an user from database
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public override bool Delete(UserEntity user)
        {
            logger.Debug("[repo] entering Delete");

            if (user.Username.Equals("admin", StringComparison.InvariantCultureIgnoreCase))
            {
                throw new Exception("Is not possible to delete admin user.");
            }

            bool result = true;
            try
            {
                using (IUnitOfWork uow = BeginUnitOfWork())
                {
                    uow.BeginTransaction();
                    List<AppUserRoleEntity> entity = uow.Query<AppUserRoleEntity>().Where(x => x.UserId.Equals(user.Id)).ToList();

                    foreach (AppUserRoleEntity e in entity)
                    {
                        uow.Delete(e);
                    }

                    uow.Delete(user);

                    uow.Commit();
                }
            }
            catch (Exception e)
            {
                logger.Error(e);
                result = false;
            }

            return result;
        }

        /// <summary>
        /// Get all user
        /// </summary>
        /// <returns></returns>
        public List<UserEntity> GetAll()
        {
            //TODO: this should contains paging inputs
            logger.Debug("[repo] entering GetAll");

            return this.QueryOver(null);

        }


        /// <summary>
        /// Search for user.
        /// </summary>
        /// <param name="userSearchSettings"></param>
        /// <returns></returns>
        public IPagedList<UserEntity> SearchUsers(UserSearchSettings userSearchSettings)
        {
            logger.Debug("[repo] entering SearchUsers");
            using (IUnitOfWork uow = BeginUnitOfWork())
            {
                uow.BeginTransaction();
                List<UserEntity> entity;
                if (string.IsNullOrEmpty(userSearchSettings.Username))
                {
                    entity = uow.Query<UserEntity>().OrderBy(x => x.Username).ToList();
                }
                else
                {
                    entity = uow.Query<UserEntity>().Where(x => x.Username.Contains(userSearchSettings.Username)).OrderBy(x => x.Username).ToList();
                }

                return new
                      StaticPagedList<UserEntity>(entity, userSearchSettings.PageNumber, userSearchSettings.PageSize, 1000);
            }
        }


        /// <summary>
        /// get an user by username
        /// </summary>
        /// <param name="userneame"></param>
        /// <returns></returns>
        public UserEntity GetByUsername(string userneame)
        {
            logger.Debug("[repo] entering GetByUsername");

            return this.FirstOrDefault(x => x.Username == userneame);
        }

        /// <summary>
        /// get an user by its email
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        public UserEntity GetByEmail(string email)
        {
            logger.Debug("[repo] entering GetByEmail");
            return this.FirstOrDefault(x => x.Email == email);


        }


    }
}
