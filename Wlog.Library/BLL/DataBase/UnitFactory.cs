//******************************************************************************
// <copyright file="license.md" company="Wlog project  (https://github.com/arduosoft/wlog)">
// Copyright (c) 2016 Wlog project  (https://github.com/arduosoft/wlog)
// Wlog project is released under LGPL terms, see license.md file.
// </copyright>
// <author>Daniele Fontani, Emanuele Bucaelli</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NLog;
using Wlog.Library.BLL.Configuration;
using Wlog.Library.BLL.Interfaces;

namespace Wlog.Library.BLL.DataBase
{
    public class UnitFactory
    {
        private static Dictionary<string, Type> factory;
        private static Logger logger = LogManager.GetCurrentClassLogger();

        public UnitFactory()
        {
            if (factory == null || factory.Count == 0)
            {
                RepositoryConfiguration configuration = RepositoryConfiguration.GetConfig();
                RepositoryCollection col = configuration.RepositoryCollection;
                IEnumerable<Repository> repo = col.Cast<Repository>();
                factory = new Dictionary<string, Type>();
                foreach (Repository item in repo)
                {
                    Type type = Type.GetType(item.DataBase);
                    factory.Add(item.RepositoryName, type);
                }
            }
        }

        public IUnitOfWork GetUnit(IRepository repo)
        {
            try
            {
                Type tipo = factory[repo.GetType().Name];
                return (IUnitOfWork)Activator.CreateInstance(tipo);
            }
            catch (Exception err)
            {
                logger.Error(err);
                throw err;
            }
        }
    }
}
